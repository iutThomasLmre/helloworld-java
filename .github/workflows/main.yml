name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
      - master

env:
  PROJECT_VERSION: "1.0.0"

jobs:
  # Étape 2 : Job de Build
  build:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer le JDK
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Étape 3 : Configurer le cache Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Étape 4 : Construire le fichier JAR
      - name: Build JAR
        run: mvn clean package -DskipTests -Dmaven.javadoc.skip=true -Dmaven.test.skip=true
        env:
          MAVEN_OPTS: "-Dmaven.repo.local=~/.m2/repository"

      # Étape 5 : Renommer et enregistrer l'artefact
      - name: Rename and save JAR artifact
        run: mv target/*.jar target/helloworld-${{ env.PROJECT_VERSION }}.jar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: helloworld-jar
          path: target/helloworld-${{ env.PROJECT_VERSION }}.jar

  # Étape 4 : Job de Tests Unitaires
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Étape 1 : Vérifier le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configurer le JDK
      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Étape 3 : Configurer le cache Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Étape 4 : Exécuter les tests unitaires
      - name: Run tests
        run: mvn test
        env:
          MAVEN_OPTS: "-Dmaven.repo.local=~/.m2/repository"
        continue-on-error: true # Continuer même si les tests échouent

  # Étape 6 : Job de Déploiement
  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
      - tests
    steps:
      # Étape 1 : Récupérer l'artefact
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: helloworld-jar
          path: ./deployments

      # Étape 2 : Simuler le déploiement
      - name: Simulate deployment
        run: |
          echo "Déploiement de l'application..."
          ls ./deployments
          echo "Déploiement terminé avec succès de helloworld-${{ env.PROJECT_VERSION }}.jar"
